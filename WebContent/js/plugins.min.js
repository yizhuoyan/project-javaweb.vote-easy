!function (a) { a.Editable.prototype.refreshFontSize = function () { var b = a(this.getSelectionElement()), c = parseInt(b.css("font-size").replace(/px/g, ""), 10) || 16; this.$editor.find('.fr-dropdown > button[data-name="fontSize"] + ul li').removeClass("active"), this.$editor.find('.fr-dropdown > button[data-name="fontSize"] + ul li[data-val="' + c + 'px"]').addClass("active") }, a.Editable.commands = a.extend(a.Editable.commands, { fontSize: { title: "Font Size", icon: "fa fa-text-height", refreshOnShow: a.Editable.prototype.refreshFontSize, seed: [{ min: 11, max: 52 }], undo: !0, callback: function (a, b) { this.inlineStyle("font-size", a, b) }, callbackWithoutSelection: function (a, b) { this._startInFontExec("font-size", a, b) } } }), a.Editable.prototype.command_dispatcher = a.extend(a.Editable.prototype.command_dispatcher, { fontSize: function (a) { var b = this.buildDropdownFontsize(a), c = this.buildDropdownButton(a, b); return c } }), a.Editable.prototype.buildDropdownFontsize = function (a) { for (var b = '<ul class="fr-dropdown-menu f-font-sizes">', c = 0; c < a.seed.length; c++) for (var d = a.seed[c], e = d.min; e <= d.max; e++) b += '<li data-cmd="' + a.cmd + '" data-val="' + e + 'px"><a href="#"><span>' + e + "px</span></a></li>"; return b += "</ul>" } }(jQuery); !function (a) { a.Editable.DEFAULTS = a.extend(a.Editable.DEFAULTS, { colors: ["#61BD6D", "#1ABC9C", "#54ACD2", "#2C82C9", "#9365B8", "#475577", "#CCCCCC", "#41A85F", "#00A885", "#3D8EB9", "#2969B0", "#553982", "#28324E", "#000000", "#F7DA64", "#FBA026", "#EB6B56", "#E25041", "#A38F84", "#EFEFEF", "#FFFFFF", "#FAC51C", "#F37934", "#D14841", "#B8312F", "#7C706B", "#D1D5D8", "REMOVE"], colorsStep: 7, colorGroups: [{ text: "Text", cmd: "foreColor" }, { text: "Background", cmd: "backColor" }], defaultColorGroup: "foreColor" }), a.Editable.prototype.refreshColors = function () { var a = this.getSelectionElement(); this.$editor.find(".fr-color-picker button.fr-color-bttn").removeClass("active"), this.refreshColor(a, "background-color", "backColor"), this.refreshColor(a, "color", "foreColor") }, a.Editable.prototype.refreshColor = function (b, c, d) { for (; a(b).get(0) != this.$element.get(0) ;) { if ("transparent" !== a(b).css(c) && "rgba(0, 0, 0, 0)" !== a(b).css(c)) { this.$editor.find('.fr-color-picker button.fr-color-bttn[data-param="' + d + '"][data-val="' + a.Editable.RGBToHex(a(b).css(c)) + '"]').addClass("active"); break } b = a(b).parent() } }, a.Editable.commands = a.extend(a.Editable.commands, { color: { icon: "fa fa-tint", title: "Color", refreshOnShow: a.Editable.prototype.refreshColors, callback: function (a, b, c) { this[c].apply(this, [b]) }, callbackWithoutSelection: function (b, c, d) { "backColor" === d && (d = "background-color"), "foreColor" === d && (d = "color"), this._startInFontExec(d, b, c), "#123456" === c && "" === this.text() && (this.cleanify(!0, !1), this.$element.find("span").each(function (b, c) { var d = a(c), e = d.css("background-color"); ("#123456" === e || "#123456" === a.Editable.RGBToHex(e)) && d.css("background-color", ""), e = d.css("color"), ("#123456" === e || "#123456" === a.Editable.RGBToHex(e)) && d.css("color", "") })) }, undo: !0 } }), a.Editable.prototype.command_dispatcher = a.extend(a.Editable.prototype.command_dispatcher, { color: function (a) { var b = this.buildDropdownColor(a), c = this.buildDropdownButton(a, b, "fr-color-picker"); return c } }), a.Editable.prototype.buildColorList = function (a, b) { for (var c = this.options.defaultColorGroup == a ? "block" : "none", d = '<div class="fr-color-set fr-' + a + '" style="display: ' + c + '">', e = 0; e < b.length; e++) { var f = b[e]; d += "REMOVE" !== f ? '<button type="button" class="fr-color-bttn" data-val="' + f + '" data-cmd="color" data-param="' + a + '" style="background: ' + f + ';"> </button>' : '<button type="button" class="fr-color-bttn" data-val="#123456" data-cmd="color" data-param="' + a + '" style="background: #FFF;"><i class="fa fa-eraser"></i></button>', e % this.options.colorsStep == this.options.colorsStep - 1 && e > 0 && (d += "<hr/>", e != this.options.colorsStep - 1 && e != 2 * this.options.colorsStep - 1 || !this.options.colorsTopChoices || (d += '<div class="separator"></div>')) } return d += "</div>" }, a.Editable.prototype.buildDropdownColor = function () { for (var b = "", c = '<div class="fr-dropdown-menu">', d = 0; d < this.options.colorGroups.length; d++) c += this.buildColorList(this.options.colorGroups[d].cmd, this.options.colorGroups[d].colors || this.options.colors); for (c += "<p>", d = 0; d < this.options.colorGroups.length; d++) b = this.options.defaultColorGroup == this.options.colorGroups[d].cmd ? "active" : "", c += '<span class="fr-choose-color ' + b + '" data-text="true" data-param="' + this.options.colorGroups[d].cmd + '" style="width: ' + 100 / this.options.colorGroups.length + '%;">' + this.options.colorGroups[d].text + "</span>"; c += "</p></div>", this.$bttn_wrapper.on(this.mousedown, ".fr-choose-color", function (a) { return a.preventDefault(), a.stopPropagation(), "mousedown" === a.type && 1 !== a.which ? !0 : void 0 }); var e = this; return this.$bttn_wrapper.on(this.mouseup, ".fr-choose-color", function (b) { if (b.preventDefault(), b.stopPropagation(), "mouseup" === b.type && 1 !== b.which) return !0; var c = a(this); c.siblings().removeClass("active"), c.addClass("active"), c.parents(".fr-dropdown-menu").find("button").attr("data-param", c.attr("data-param")), c.parents(".fr-dropdown-menu").find(".fr-color-set").hide(), c.parents(".fr-dropdown-menu").find(".fr-color-set.fr-" + c.attr("data-param")).show(), e.refreshColors() }), c }, a.Editable.prototype.backColor = function (b) { this.inlineStyle("background-color", "backColor", b), this.saveSelectionByMarkers(), this.$element.find("span").each(function (b, c) { var d = a(c), e = d.css("background-color"); ("#123456" === e || "#123456" === a.Editable.RGBToHex(e)) && (d.css("background-color", ""), d.find("span").each(function (b, c) { var d = a(c); d.css("background-color", ""), "" !== d.attr("style") || d.hasClass("f-marker") || d.replaceWith(d.contents()) })), "" !== d.attr("style") || d.hasClass("f-marker") || d.replaceWith(d.contents()) }), this.restoreSelectionByMarkers(), this.cleanify(); var c = this.$editor.find('button.fr-color-bttn[data-cmd="backColor"][data-val="' + b + '"]'); c.addClass("active"), c.siblings().removeClass("active") }, a.Editable.prototype.foreColor = function (b) { this.inlineStyle("color", "foreColor", b), this.saveSelectionByMarkers(), this.$element.find("span").each(function (b, c) { var d = a(c), e = d.css("color"); ("#123456" === e || "#123456" === a.Editable.RGBToHex(e)) && (d.css("color", ""), d.find("span").each(function (b, c) { var d = a(c); d.css("color", ""), "" !== d.attr("style") || d.hasClass("f-marker") || d.replaceWith(d.contents()) })), "" !== d.attr("style") || d.hasClass("f-marker") || d.replaceWith(d.contents()) }), this.restoreSelectionByMarkers(), this.cleanify(); var c = this.$editor.find('button.fr-color-bttn[data-cmd="foreColor"][data-val="' + b + '"]'); c.addClass("active"), c.siblings().removeClass("active") } }(jQuery); !function (a) { a.Editable.DEFAULTS = a.extend(a.Editable.DEFAULTS, { maxCharacters: -1, countCharacters: !0 }), a.Editable.prototype.validKeyCode = function (a, b) { return b ? !1 : a > 47 && 58 > a || 32 == a || 13 == a || a > 64 && 91 > a || a > 95 && 112 > a || a > 185 && 193 > a || a > 218 && 223 > a }, a.Editable.prototype.charNumber = function () { return this.getText().length }, a.Editable.prototype.checkCharNumber = function (a, b, c) { if (b.options.maxCharacters < 0) return !0; if (b.charNumber() < b.options.maxCharacters) return !0; var d = c.which, e = (c.ctrlKey || c.metaKey) && !c.altKey; return b.validKeyCode(d, e) ? (b.triggerEvent("maxCharNumberExceeded", [], !1), !1) : !0 }, a.Editable.prototype.checkCharNumberOnPaste = function (b, c, d) { if (c.options.maxCharacters < 0) return !0; var e = a("<div>").html(d).text().length; return e + c.charNumber() <= c.options.maxCharacters ? d : (c.triggerEvent("maxCharNumberExceeded", [], !1), "") }, a.Editable.prototype.updateCharNumber = function (a, b) { if (b.options.countCharacters) { var c = b.charNumber() + (b.options.maxCharacters > 0 ? "/" + b.options.maxCharacters : ""); b.$box.attr("data-chars", c) } }, a.Editable.prototype.initCharNumber = function () { this.$original_element.on("editable.keydown", this.checkCharNumber), this.$original_element.on("editable.afterPasteCleanup", this.checkCharNumberOnPaste), this.$original_element.on("editable.keyup", this.updateCharNumber), this.$original_element.on("editable.contentChanged", this.updateCharNumber), this.updateCharNumber(null, this) }, a.Editable.initializers.push(a.Editable.prototype.initCharNumber) }(jQuery); !function (a) { a.Editable.DEFAULTS = a.extend(a.Editable.DEFAULTS, { videoAllowedAttrs: ["src", "width", "height", "frameborder", "allowfullscreen", "webkitallowfullscreen", "mozallowfullscreen", "href", "target", "id", "controls", "value", "name"], videoAllowedTags: ["iframe", "object", "param", "video", "source", "embed"], defaultVideoAlignment: "center", textNearVideo: !0 }), a.Editable.VIDEO_PROVIDERS = [{ test_regex: /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:m\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=|embed\/)?(.+)/g, url_text: "//www.youtube.com/embed/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>' }, { test_regex: /^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/))?([0-9]+)/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:vimeo\.com)\/(?:channels\/[A-z]+\/|groups\/[A-z]+\/videos\/)?(.+)/g, url_text: "//player.vimeo.com/video/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>' }, { test_regex: /^.+(dailymotion.com|dai.ly)\/(video|hub)?\/?([^_]+)[^#]*(#video=([^_&]+))?/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:dailymotion\.com|dai\.ly)\/(?:video|hub)?\/?(.+)/g, url_text: "//www.dailymotion.com/embed/video/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>' }, { test_regex: /(?:v\.)?youku\.com\/(.*?)\/id_(.*?).html\)?/, url_regex: /(?:https?:\/\/)?(?:v\.)?youku\.com\/(.*?)\/id_(.*?).html\)?/, url_text: "//player.youku.com/embed/$2", html: '<iframe width="640" height="360" src="{url}?format=embed" frameborder="0" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" allowtransparency="true"></iframe>' }], a.Editable.video_commands = { floatVideoLeft: { title: "Float Left", icon: { type: "font", value: "fa fa-align-left" } }, floatVideoNone: { title: "Float None", icon: { type: "font", value: "fa fa-align-justify" } }, floatVideoRight: { title: "Float Right", icon: { type: "font", value: "fa fa-align-right" } }, removeVideo: { title: "Remove Video", icon: { type: "font", value: "fa fa-trash-o" } } }, a.Editable.DEFAULTS = a.extend(a.Editable.DEFAULTS, { videoButtons: ["floatVideoLeft", "floatVideoNone", "floatVideoRight", "removeVideo"] }), a.Editable.commands = a.extend(a.Editable.commands, { insertVideo: { title: "Insert Video", icon: "fa fa-video-camera", callback: function () { this.insertVideo() }, undo: !1 } }), a.Editable.prototype.insertVideo = function () { this.options.inlineMode || (this.closeImageMode(), this.imageMode = !1, this.positionPopup("insertVideo")), this.selectionInEditor() && this.saveSelection(), this.showInsertVideo(), this.$video_wrapper.find("textarea").val("") }, a.Editable.prototype.insertVideoHTML = function () { var a = '<div class="froala-popup froala-video-popup" style="display: none;"><h4><span data-text="true">Insert Video</span><i title="Cancel" class="fa fa-times" id="f-video-close-' + this._id + '"></i></h4><div class="f-popup-line"><textarea placeholder="\u901a\u7528\u4ee3\u7801" id="f-video-textarea-' + this._id + '"></textarea></div><p class="or"><span data-text="true">or</span></p><div class="f-popup-line"><input type="text" placeholder="http://youku.com/" id="f-video-input-' + this._id + '"/><button data-text="true" class="f-ok f-submit fr-p-bttn" id="f-video-ok-' + this._id + '">OK</button></div></div>'; return a }, a.Editable.prototype.buildInsertVideo = function () { this.$video_wrapper = a(this.insertVideoHTML()), this.$popup_editor.append(this.$video_wrapper), this.addListener("hidePopups", this.hideVideoWrapper), this.$video_wrapper.on("mouseup touchend", a.proxy(function (a) { this.isResizing() || a.stopPropagation() }, this)), this.$video_wrapper.on("mouseup keydown", "input#f-video-input-" + this._id + ", textarea#f-video-textarea-" + this._id, a.proxy(function (a) { a.stopPropagation() }, this)); var b = this; this.$video_wrapper.on("change", "input#f-video-input-" + this._id + ", textarea#f-video-textarea-" + this._id, function () { "INPUT" == this.tagName ? b.$video_wrapper.find("textarea#f-video-textarea-" + b._id).val("") : "TEXTAREA" == this.tagName && b.$video_wrapper.find("input#f-video-input-" + b._id).val("") }), this.$video_wrapper.on("click", "button#f-video-ok-" + this._id, a.proxy(function () { var a = this.$video_wrapper.find("input#f-video-input-" + this._id), b = this.$video_wrapper.find("textarea#f-video-textarea-" + this._id); "" !== a.val() ? this.writeVideo(a.val(), !1) : "" !== b.val() && this.writeVideo(b.val(), !0) }, this)), this.$video_wrapper.on(this.mouseup, "i#f-video-close-" + this._id, a.proxy(function () { this.$bttn_wrapper.show(), this.hideVideoWrapper(), this.options.inlineMode && !this.imageMode && 0 === this.options.buttons.length && this.hide(), this.restoreSelection(), this.focus(), this.options.inlineMode || this.hide() }, this)), this.$video_wrapper.on("click", function (a) { a.stopPropagation() }), this.$video_wrapper.on("click", "*", function (a) { a.stopPropagation() }), this.$window.on("keydown." + this._id, a.proxy(function (b) { if (this.$element.find(".f-video-editor.active").length > 0) { var c = b.which; if (46 == c || 8 == c) return b.stopPropagation(), b.preventDefault(), setTimeout(a.proxy(function () { this.removeVideo() }, this), 0), !1 } }, this)) }, a.Editable.prototype.destroyVideo = function () { this.$video_wrapper.html("").removeData().remove() }, a.Editable.prototype.initVideo = function () { this.buildInsertVideo(), this.addVideoControls(), this.addListener("destroy", this.destroyVideo) }, a.Editable.initializers.push(a.Editable.prototype.initVideo), a.Editable.prototype.hideVideoEditorPopup = function () { this.$video_editor && (this.$video_editor.hide(), a("span.f-video-editor").removeClass("active"), this.$element.removeClass("f-non-selectable"), this.editableDisabled || this.isHTML || this.$element.attr("contenteditable", !0)) }, a.Editable.prototype.showVideoEditorPopup = function () { this.hidePopups(), this.$video_editor && this.$video_editor.show(), this.$element.removeAttr("contenteditable") }, a.Editable.prototype.addVideoControlsHTML = function () { this.$video_editor = a('<div class="froala-popup froala-video-editor-popup" style="display: none">'); for (var b = a('<div class="f-popup-line">').appendTo(this.$video_editor), c = 0; c < this.options.videoButtons.length; c++) { var d = this.options.videoButtons[c]; if (void 0 !== a.Editable.video_commands[d]) { var e = a.Editable.video_commands[d], f = '<button class="fr-bttn" data-callback="' + d + '" data-cmd="' + d + '" title="' + e.title + '">'; f += void 0 !== this.options.icons[d] ? this.prepareIcon(this.options.icons[d], e.title) : this.prepareIcon(e.icon, e.title), f += "</button>", b.append(f) } } this.addListener("hidePopups", this.hideVideoEditorPopup), this.$popup_editor.append(this.$video_editor), this.bindCommandEvents(this.$video_editor) }, a.Editable.prototype.floatVideoLeft = function () { a("span.f-video-editor.active").attr("class", "f-video-editor active fr-fvl"), this.triggerEvent("videoFloatedLeft"), a("span.f-video-editor.active").click() }, a.Editable.prototype.floatVideoRight = function () { a("span.f-video-editor.active").attr("class", "f-video-editor active fr-fvr"), this.triggerEvent("videoFloatedRight"), a("span.f-video-editor.active").click() }, a.Editable.prototype.floatVideoNone = function () { a("span.f-video-editor.active").attr("class", "f-video-editor active fr-fvn"), this.triggerEvent("videoFloatedNone"), a("span.f-video-editor.active").click() }, a.Editable.prototype.removeVideo = function () { a("span.f-video-editor.active").remove(), this.hide(), this.triggerEvent("videoRemoved"), this.focus() }, a.Editable.prototype.refreshVideo = function () { this.$element.find("iframe, object").each(function (b, c) { for (var d = a(c), e = 0; e < a.Editable.VIDEO_PROVIDERS.length; e++) { var f = a.Editable.VIDEO_PROVIDERS[e]; if (f.test_regex.test(d.attr("src"))) { 0 === d.parents(".f-video-editor").length && d.wrap('<span class="f-video-editor fr-fvn" data-fr-verified="true" contenteditable="false">'); break } } }), this.browser.msie && this.$element.find(".f-video-editor").each(function () { this.oncontrolselect = function () { return !1 } }), this.options.textNearVideo || this.$element.find(".f-video-editor").attr("contenteditable", !1).addClass("fr-tnv") }, a.Editable.prototype.addVideoControls = function () { this.addVideoControlsHTML(), this.addListener("sync", this.refreshVideo), this.$element.on("mousedown", "span.f-video-editor", a.proxy(function (a) { a.stopPropagation() }, this)), this.$element.on("click touchend", "span.f-video-editor", a.proxy(function (b) { if (this.isDisabled) return !1; b.preventDefault(), b.stopPropagation(); var c = b.currentTarget; this.clearSelection(), this.showVideoEditorPopup(), this.showByCoordinates(a(c).offset().left + a(c).width() / 2, a(c).offset().top + a(c).height() + 3), a(c).addClass("active"), this.refreshVideoButtons(c) }, this)) }, a.Editable.prototype.refreshVideoButtons = function (b) { var c = a(b).attr("class"); this.$video_editor.find("[data-cmd]").removeClass("active"), c.indexOf("fr-fvl") >= 0 ? this.$video_editor.find('[data-cmd="floatVideoLeft"]').addClass("active") : c.indexOf("fr-fvr") >= 0 ? this.$video_editor.find('[data-cmd="floatVideoRight"]').addClass("active") : this.$video_editor.find('[data-cmd="floatVideoNone"]').addClass("active") }, a.Editable.prototype.writeVideo = function (b, c) { var d = null; if (c) d = this.clean(b, !0, !1, this.options.videoAllowedTags, this.options.videoAllowedAttrs); else for (var e = 0; e < a.Editable.VIDEO_PROVIDERS.length; e++) { var f = a.Editable.VIDEO_PROVIDERS[e]; if (f.test_regex.test(b)) { b = b.replace(f.url_regex, f.url_text), d = f.html.replace(/\{url\}/, b); break } } if (d) { this.restoreSelection(), this.$element.focus(); var g = "fr-fvn"; "left" == this.options.defaultVideoAlignment && (g = "fr-fvl"), "right" == this.options.defaultVideoAlignment && (g = "fr-fvr"), this.textNearVideo || (g += " fr-tnv"); try { this.insertHTML('<span contenteditable="false" class="f-video-editor ' + g + '" data-fr-verified="true">' + d + "</span>") } catch (h) { } this.$bttn_wrapper.show(), this.hideVideoWrapper(), this.hide(), this.triggerEvent("videoInserted", [d]) } else this.triggerEvent("videoError") }, a.Editable.prototype.showVideoWrapper = function () { this.$video_wrapper && (this.$video_wrapper.show(), this.$video_wrapper.find(".f-popup-line input").val("")) }, a.Editable.prototype.hideVideoWrapper = function () { this.$video_wrapper && (this.$video_wrapper.hide(), this.$video_wrapper.find("input").blur()) }, a.Editable.prototype.showInsertVideo = function () { this.hidePopups(), this.showVideoWrapper() } }(jQuery);